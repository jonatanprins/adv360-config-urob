/*                                 
 ╭────────────────────────────┬────────────────────────────╮ 
 │  0   1   2   3   4   5   6 │  7   8   9  10  11  12  13 │ 
 │ 14  15  16  17  18  19  20 │ 21  22  23  24  25  26  27 │ 
 │ 28  29  30  31  32  33  34 │ 35  36  37  38  39  40  41 │ 
 │ 42  43  44  45  46  47 ╭───┴───╮ 48  49  50  51  52  53 │ 
 │ 54  55  56  57  58╭────╯       ╰────╮59  60  61  62  63 │ 
 ╰───────────────────┼────────┬────────┼───────────────────╯ 
                 ╭───╯ 64  65 │ 66  67 ╰───╮                 
                 │ 68  69  70 │ 71  72  73 │                 
                 ╰───────╮ 74 │ 75 ╭───────╯                 
                         ╰────┴────╯                         
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>
#include "helper.h"

/* definitions for mouse layer */
#include "mouse.dtsi"

#define ___ &trans

#define GLOBAL_QUICK_TAP_MS 150
#define COMBO_MS 20

#define QWERTY 0
#define B2 1
#define COLEMAK 2
#define FN 3
#define symbols_one 4
#define symbols_two 5
#define symbols_three 6
#define MOD 7

#define A_LEFT 0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 42 43 44 45 46 47 54 55 56 57 58 
#define A_RIGHT 7 8 9 10 11 12 13 21 22 23 24 25 26 27 35 36 37 38 39 40 41 48 49 50 51 52 53 59 60 61 62 63
#define THUMBS 68 69 64 67 72 73

&sk {
    release-after-ms = <600>;
    quick-release; 
};

&sl {
    release-after-ms = <700>;
    /delete-property/ quick-release; 
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE>;
    /delete-property/ ignore-modifiers; 
};

/ {
    /* remove unused keys from layout and move thumb cluster to bottom */
    chosen {
        zmk,matrix_transform = &urobs_transform;
    };

    // combos {
    //     compatible = "zmk,combos";
    //     combo_esc {
    //         timeout-ms = <30>;
    //         key-positions = <38 39>;
    //         bindings = <&kp ENTER>;
    //     };
    // };

    behaviors {
        gpipe: grave_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "grave_pipe";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&kp PIPE>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };
        ppipe: pipe_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "pipe_pipe";
            #binding-cells = <0>;
            bindings = <&kp PIPE>, <&kp PIPE>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };
        pkp_n1: plus_kp_n1 {
            compatible = "zmk,behavior-mod-morph";
            label = "plus_kp_n1";
            #binding-cells = <0>;
            bindings = <&kp PLUS>, <&kp KP_N1>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };
        lkp_n2: left_bracket_kp_n2 {
            compatible = "zmk,behavior-mod-morph";
            label = "left_bracket_kp_n2";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp KP_N2>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };
        lkp_n3: left_brace_kp_n3 {
            compatible = "zmk,behavior-mod-morph";
            label = "left_brace_kp_n3";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE>, <&kp KP_N3>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };
        lkp_n4: left_parenthesis_kp_n4 {
            compatible = "zmk,behavior-mod-morph";
            label = "left_parenthesis_kp_n4";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp KP_N4>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };
        akp_n5: amps_kp_n5 {
            compatible = "zmk,behavior-mod-morph";
            label = "amps_kp_n5";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp KP_N5>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };
        ekp_n6: equal_kp_n6 {
            compatible = "zmk,behavior-mod-morph";
            label = "equal_kp_n6";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp KP_N6>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };
        rkp_n7: right_parenthesis_kp_n7 {
            compatible = "zmk,behavior-mod-morph";
            label = "right_parenthesis_kp_n7";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp KP_N7>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };
        rkp_n8: right_brace_kp_n8 {
            compatible = "zmk,behavior-mod-morph";
            label = "right_brace_kp_n8";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACE>, <&kp KP_N8>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };
        rkp_n9: right_bracket_kp_n9 {
            compatible = "zmk,behavior-mod-morph";
            label = "right_bracket_kp_n9";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET>, <&kp KP_N9>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };
        skp_n0: star_kp_n0 {
            compatible = "zmk,behavior-mod-morph";
            label = "star_kp_n0";
            #binding-cells = <0>;
            bindings = <&kp STAR>, <&kp KP_N0>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };
        eprcnt: excl_prcnt {
            compatible = "zmk,behavior-mod-morph";
            label = "excl_prcnt";
            #binding-cells = <0>;
            bindings = <&kp EXCL>, <&kp PRCNT>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };
        dgrave: dllr_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "dllr_grave";
            #binding-cells = <0>;
            bindings = <&kp DLLR>, <&kp GRAVE>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };
        ggrave: grave_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "grave_grave";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&kp GRAVE>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };
        bhash: bslh_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "bslh_hash";
            #binding-cells = <0>;
            bindings = <&kp BSLH>, <&kp HASH>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };
        acaret: at_caret {
            compatible = "zmk,behavior-mod-morph";
            label = "at_caret";
            #binding-cells = <0>;
            bindings = <&kp AT>, <&kp CARET>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
                &kp EQUAL &kp N1    &kp N2    &kp N3    &kp N4    &kp N5    ___    &mo MOD   &kp N6    &kp N7    &kp N8    &kp N9    &kp N0    &kp MINUS
                &kp TAB   &kp Q     &kp W     &kp E     &kp R     &kp T     &to QWERTY     ___       &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSLH
                &kp ESC   &kp A     &kp S     &kp D     &kp F     &kp G     &to COLEMAK    &to B2  &kp H     &kp J     &kp K     &kp L     &kp SEMI  &sl symbols_one 
                &sk LSHFT &kp Z     &kp X     &kp C     &kp V     &kp B                              &kp N     &kp M     &kp COMMA &kp DOT   &kp FSLH  &sk RSHFT
                &mo FN    ___ ___ &kp LEFT  &kp RIGHT                                              &kp DOWN    &kp UP  ___  ___  &mo FN
                                                                      &sk LCTRL &sk LALT       &kp RGUI  &sk RCTRL
                                                        &kp BSPC  &sl symbols_one      &kp HOME       &kp PG_UP &kp ENTER &kp SPACE
                                                                            &kp END        &kp PG_DN
            >;
        };

        base_layer_2 {
            bindings = <

                &ppipe    &pkp_n1        &lkp_n2        &lkp_n3    &lkp_n4   &akp_n5   ___            &mo MOD   &ekp_n6      &rkp_n7     &rkp_n8     &rkp_n9     &skp_n0     &eprcnt
                &kp TAB   &kp Q          &kp W          &kp E      &kp R     &kp T     &to QWERTY     ___       &kp Y        &kp U       &kp I       &kp O       &kp P       &kp BSLH
                &kp ESC   &kp A          &kp S          &kp D      &kp F     &kp G     &to COLEMAK    &to B2    &kp H        &kp J       &kp K       &kp L       &kp SEMI    &sl symbols_three
                &sk LSHFT &kp Z          &kp X          &kp C      &kp V     &kp B                              &kp N        &kp M       &kp COMMA   &kp DOT     &kp FSLH    &sk RSHFT
                &mo FN    ___            ___            &kp LEFT   &kp RIGHT                                                 &kp DOWN    &kp UP      ___         ___         &mo FN
                                                                   &sk LCTRL &sk LALT                 &kp RGUI  &sk RCTRL
                                                 &kp BSPC &sl symbols_three  &kp HOME                 &kp PG_UP &kp ENTER &kp SPACE
                                                                             &kp END                  &kp PG_DN
            >;
        };

        colemak_layer {
            bindings = <
                ___       ___       ___       ___       ___       ___       ___            ___       ___       ___       ___       ___       ___       ___
                ___       &kp Q     &kp W     &kp F     &kp P     &kp B     ___            ___       &kp J     &kp L     &kp U     &kp Y     &kp SQT   &kp BSLH
                ___       &kp A     &kp R     &kp S     &kp T     &kp G     ___            ___       &kp M     &kp N     &kp E     &kp I     &kp O     &kp FSLH
                ___       &kp Z     &kp X     &kp C     &kp D     &kp V                              &kp K     &kp H     &kp COMMA &kp DOT   &kp SEMI  ___
                ___       ___       ___       ___       ___                                                    ___       ___       ___       ___       ___
                                                                  ___       ___            ___       ___
                                                        ___       ___       ___            ___       ___       ___
                                                                            ___            ___
            >;
        };

        fn {
            bindings = <
                &kp F1    &kp F2    &kp F3    &kp F4    &kp F5    &kp F6    ___            ___       &kp F7    &kp F8    &kp F9    &kp F10   &kp F11   &kp F12
                ___       ___       ___       ___       ___       ___       ___            ___       ___       ___       ___       ___       ___       ___
                ___       ___       ___       ___       ___       ___       ___            ___       ___       ___       ___       ___       ___       ___
                ___       ___       ___       ___       ___       ___                                ___       ___       ___       ___       ___       ___
                ___       ___       ___       ___       ___                                                    ___       ___       ___       ___       ___
                                                                  ___       ___            ___       ___
                                                        ___       ___       ___            ___       ___       ___
                                                                            ___            ___
            >;
        };

        symbols_one {
            bindings = <
                ___       ___          ___        ___           ___         ___          ___              ___         ___          ___              ___          ___          ___       ___
                ___       &kp EXCL     &kp AT     &kp HASH      &kp DLLR  &kp PRCNT    ___              ___         &kp CARET  &kp AMPS           &kp STAR     &kp QMARK  &kp SQT     ___
                ___       &kp KP_PLUS  &kp EQUAL  &kp LPAR      &kp RPAR  &kp DQT      ___              ___         &kp COLON  &kp RBKT           &kp LBKT     &kp RBRC   &kp LBRC    ___
                ___       &kp LT       &kp PIPE   &kp MINUS     &kp GT    &kp BSLH                                  &kp GRAVE  &kp UNDER          &kp FSLH     &kp TILDE  &kp SEMI    ___
                ___       ___          ___          ___          ___                                                              ___             ___          ___          ___         ___
                                                                              ___          ___              ___         ___        
                                                                 ___          ___          ___              ___         ___          ___
                                                                                           ___              ___
            >;
        };

        symbols_two {
            bindings = <
                ___       ___          ___       ___       ___       ___       ___            ___       ___       ___       ___       ___       ___       ___
                ___       &kp SQT     &kp LT    &kp GT   &kp DQT   ___        ___            ___   &kp AMPS  &kp UNDER   &kp RBKT  &kp LBKT  &kp PRCNT     ___     
                ___       &kp EXCL    &kp MINUS &kp KP_PLUS &kp EQUAL &kp HASH  ___            ___    &kp PIPE  &kp COLON   &kp RPAR  &kp LPAR  &kp QMARK  ___     
                ___       &kp CARET   &kp BSLH  &kp STAR &kp FSLH  ___                             &kp TILDE &kp DLLR    &kp RBRC  &kp LBRC  &kp AT  ___
                ___       ___          ___       ___       ___                                                    ___       ___       ___       ___       ___
                                                                     ___       ___            ___       ___
                                                           ___       ___       ___            ___       ___       ___
                                                                               ___            ___
            >;
        };


        symbols_three {
            bindings = <
                ___       ___          ___        ___           ___         ___          ___              ___         ___          ___              ___          ___          ___       ___
                ___       &kp EXCL     &kp AT     &kp HASH      &kp DLLR  &kp PRCNT    ___              ___         &kp CARET  &kp AMPS           &kp STAR     &kp QMARK  &kp SQT     ___
                ___       &kp KP_PLUS  &kp EQUAL  &kp LPAR      &kp RPAR  &kp DQT      ___              ___         &kp COLON  &kp RBKT           &kp LBKT     &kp RBRC   &kp LBRC    ___
                ___       &kp LT       &kp PIPE   &kp MINUS     &kp GT    &kp BSLH                                  &kp GRAVE  &kp UNDER          &kp FSLH     &kp TILDE  &kp SEMI    ___
                ___       ___          ___          ___          ___                                                              ___             ___          ___          ___         ___
                                                                              ___          ___              ___         ___        
                                                                 ___          ___          ___              ___         ___          ___
                                                                                           ___              ___
            >;
        };


        mod {
            bindings = <
                ___       &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 ___              ___         &bt BT_SEL 0 &bt BT_SEL 1     &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 ___
                ___       ___          ___          ___          ___          ___          &bootloader      &bootloader ___          ___              ___          ___          ___          ___
                ___       ___          ___          ___          ___          ___          ___              ___         ___          ___              ___          ___          ___          ___
                ___       ___          ___          ___          ___          ___                                       ___          ___              ___          ___          ___          ___
                ___       ___          ___          &bl BL_INC   &bl BL_DEC                                                          &bl BL_INC       &bl BL_DEC   ___          ___          ___
                                                                              &bt BT_CLR   &bt BT_CLR       &bt BT_CLR  &bt BT_CLR
                                                                 ___          &bl BL_TOG   ___              ___         &bl BL_TOG   ___
                                                                                           ___              ___
            >;
        };
    };
};

